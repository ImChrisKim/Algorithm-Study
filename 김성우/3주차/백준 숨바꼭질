#include <iostream>
#include <vector>
using namespace std;

int MAX = 21e8;

vector<vector<int>> edges; // 모든 간선에 대한 정보를 담는 전역 변수
int dist[550];

// 벨만 포드 알고리즘 구현 함수
bool sol(int start, int n, int m) {
    // 시작 노드에 대하여 초기화
    dist[start] = 0;

    // 전체 n번의 라운드를 반복
    for (int i = 0; i < n; ++i) {
        // 매 반복마다 "모든 간선"을 확인하며
        for (int j = 0; j < m; ++j) {
            int cur = edges[j][0];
            int next_node = edges[j][1];
            int cost = edges[j][2];

            // 현재 간선을 거쳐서 다른 노드로 이동하는 거리가 더 짧은 경우
            if (dist[cur] != MAX && dist[next_node] > dist[cur] + cost) {
                dist[next_node] = dist[cur] + cost;
                // n번째 라운드에서도 값이 갱신된다면 음수 순환이 존재
                if (i == n - 1) {
                    return true;
                }
            }
        }
    }
    return false;
}

int main() {
    int n, m;
    cin >> n >> m; // 노드의 개수, 간선의 개수를 입력받기

    edges.resize(m, vector<int>(3)); // 모든 간선에 대한 정보를 담는 리스트 크기 설정
    for (int i = 0; i < 550; i++) {
        dist[i] = MAX;
    }

    // 모든 간선 정보를 입력받기
    for (int i = 0; i < m; ++i) {
        cin >> edges[i][0] >> edges[i][1] >> edges[i][2];
        // a번 노드에서 b번 노드로 가는 비용이 c라는 의미
    }

    // 벨만 포드 알고리즘을 수행
    bool negative_cycle = sol(1, n, m); // 1번 노드가 시작 노드

    if (negative_cycle) { // 음수 순환이 존재하면
        cout << "-1" << endl;
    }
    else {
        for (int i = 2; i <= n; ++i) {
            // 도달할 수 없는 경우 -1 출력
            if (dist[i] == MAX) {
                cout << "-1" << endl;
            }
            else {
                // 도달할 수 있는 경우 거리 출력
                cout << dist[i] << endl;
            }
        }
    }

    return 0;
}
